// <auto-generated />
using System;
using BusDelivery.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BusDelivery.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BusDelivery.Domain.Entities.Bus", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("numberOfSeat")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("operateTime")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("organization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("plateNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.HasKey("id");

                    b.ToTable("Bus", (string)null);
                });

            modelBuilder.Entity("BusDelivery.Domain.Entities.BusRoute", b =>
                {
                    b.Property<int>("routeId")
                        .HasColumnType("int");

                    b.Property<int>("busId")
                        .HasColumnType("int");

                    b.HasKey("routeId", "busId");

                    b.HasIndex("busId");

                    b.ToTable("BusRoutes", (string)null);
                });

            modelBuilder.Entity("BusDelivery.Domain.Entities.Coordinate", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<double>("lat")
                        .HasColumnType("float");

                    b.Property<double>("lng")
                        .HasColumnType("float");

                    b.Property<int>("routeId")
                        .HasColumnType("int");

                    b.Property<int>("stt")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("routeId");

                    b.ToTable("Coordinates", (string)null);
                });

            modelBuilder.Entity("BusDelivery.Domain.Entities.Office", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("contact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("images")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lat")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("lng")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("routeId")
                        .HasColumnType("int");

                    b.Property<bool>("status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.HasKey("id");

                    b.ToTable("Offices", (string)null);
                });

            modelBuilder.Entity("BusDelivery.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("contact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("packageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("price")
                        .HasColumnType("real");

                    b.Property<float>("weight")
                        .HasColumnType("real");

                    b.HasKey("id");

                    b.HasIndex("packageId");

                    b.ToTable("Orders", (string)null);
                });

            modelBuilder.Entity("BusDelivery.Domain.Entities.Package", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("busId")
                        .HasColumnType("int");

                    b.Property<DateTime>("createTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 1, 13, 0, 44, 51, 622, DateTimeKind.Local).AddTicks(4776));

                    b.Property<int>("image")
                        .HasColumnType("int");

                    b.Property<string>("note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("officeId")
                        .HasColumnType("int");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.Property<int>("stationId")
                        .HasColumnType("int");

                    b.Property<string>("status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("True");

                    b.Property<float>("totalPrice")
                        .HasColumnType("real");

                    b.Property<float>("totalWeight")
                        .HasColumnType("real");

                    b.Property<Guid>("userId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("busId");

                    b.HasIndex("officeId");

                    b.HasIndex("stationId");

                    b.ToTable("Packages", (string)null);
                });

            modelBuilder.Entity("BusDelivery.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("clientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("createdOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("deviceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("expiresOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("token")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("userId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("token")
                        .IsUnique();

                    b.HasIndex("userId");

                    b.HasIndex("clientId", "deviceId")
                        .IsUnique();

                    b.ToTable("RefreshTokens", (string)null);
                });

            modelBuilder.Entity("BusDelivery.Domain.Entities.Report", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("createBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("createTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 1, 13, 0, 44, 51, 623, DateTimeKind.Local).AddTicks(1325));

                    b.Property<int>("targetId")
                        .HasColumnType("int");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("createBy");

                    b.ToTable("Reports", (string)null);
                });

            modelBuilder.Entity("BusDelivery.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("BusDelivery.Domain.Entities.Route", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("endPoint")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("operateTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("startPoint")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.HasKey("id");

                    b.ToTable("Routes", (string)null);
                });

            modelBuilder.Entity("BusDelivery.Domain.Entities.Station", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("lat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lng")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("officeId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("officeId");

                    b.ToTable("Stations", (string)null);
                });

            modelBuilder.Entity("BusDelivery.Domain.Entities.StationRoute", b =>
                {
                    b.Property<int>("routeId")
                        .HasColumnType("int");

                    b.Property<int>("stationId")
                        .HasColumnType("int");

                    b.HasKey("routeId", "stationId");

                    b.HasIndex("stationId");

                    b.ToTable("StationRoutes", (string)null);
                });

            modelBuilder.Entity("BusDelivery.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OS")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("deviceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("deviceVersion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("gentle")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("officeId")
                        .HasColumnType("int");

                    b.Property<string>("phoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("roleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.HasKey("id");

                    b.HasIndex("officeId");

                    b.HasIndex("roleId");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("BusDelivery.Domain.Entities.UserPackage", b =>
                {
                    b.Property<Guid>("userId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("packageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("userId", "packageId");

                    b.HasIndex("packageId");

                    b.ToTable("UserPackages", (string)null);
                });

            modelBuilder.Entity("BusDelivery.Domain.Entities.Weather", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<double>("humidity")
                        .HasColumnType("float");

                    b.Property<int>("officeId")
                        .HasColumnType("int");

                    b.Property<string>("recordAt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("temperature")
                        .HasColumnType("float");

                    b.Property<double>("windySpeed")
                        .HasColumnType("float");

                    b.HasKey("id");

                    b.HasIndex("officeId");

                    b.ToTable("Weathers", (string)null);
                });

            modelBuilder.Entity("BusDelivery.Domain.Entities.BusRoute", b =>
                {
                    b.HasOne("BusDelivery.Domain.Entities.Bus", null)
                        .WithMany("busRoutes")
                        .HasForeignKey("busId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BusDelivery.Domain.Entities.Route", null)
                        .WithMany("busRoutes")
                        .HasForeignKey("routeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BusDelivery.Domain.Entities.Coordinate", b =>
                {
                    b.HasOne("BusDelivery.Domain.Entities.Route", null)
                        .WithMany("coordinates")
                        .HasForeignKey("routeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BusDelivery.Domain.Entities.Order", b =>
                {
                    b.HasOne("BusDelivery.Domain.Entities.Package", null)
                        .WithMany("orders")
                        .HasForeignKey("packageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BusDelivery.Domain.Entities.Package", b =>
                {
                    b.HasOne("BusDelivery.Domain.Entities.Bus", null)
                        .WithMany("packages")
                        .HasForeignKey("busId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusDelivery.Domain.Entities.Office", null)
                        .WithMany("packages")
                        .HasForeignKey("officeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusDelivery.Domain.Entities.Station", null)
                        .WithMany("packages")
                        .HasForeignKey("stationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("BusDelivery.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("BusDelivery.Domain.Entities.User", null)
                        .WithMany("refreshTokens")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BusDelivery.Domain.Entities.Report", b =>
                {
                    b.HasOne("BusDelivery.Domain.Entities.User", null)
                        .WithMany("reports")
                        .HasForeignKey("createBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BusDelivery.Domain.Entities.Station", b =>
                {
                    b.HasOne("BusDelivery.Domain.Entities.Office", null)
                        .WithMany("stations")
                        .HasForeignKey("officeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BusDelivery.Domain.Entities.StationRoute", b =>
                {
                    b.HasOne("BusDelivery.Domain.Entities.Route", null)
                        .WithMany("stationRoutes")
                        .HasForeignKey("routeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BusDelivery.Domain.Entities.Station", null)
                        .WithMany("stationRoutes")
                        .HasForeignKey("stationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("BusDelivery.Domain.Entities.User", b =>
                {
                    b.HasOne("BusDelivery.Domain.Entities.Office", null)
                        .WithMany("users")
                        .HasForeignKey("officeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusDelivery.Domain.Entities.Role", null)
                        .WithMany("users")
                        .HasForeignKey("roleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BusDelivery.Domain.Entities.UserPackage", b =>
                {
                    b.HasOne("BusDelivery.Domain.Entities.Package", null)
                        .WithMany("userPackages")
                        .HasForeignKey("packageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusDelivery.Domain.Entities.User", null)
                        .WithMany("userPackages")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("BusDelivery.Domain.Entities.Weather", b =>
                {
                    b.HasOne("BusDelivery.Domain.Entities.Office", null)
                        .WithMany("weathers")
                        .HasForeignKey("officeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BusDelivery.Domain.Entities.Bus", b =>
                {
                    b.Navigation("busRoutes");

                    b.Navigation("packages");
                });

            modelBuilder.Entity("BusDelivery.Domain.Entities.Office", b =>
                {
                    b.Navigation("packages");

                    b.Navigation("stations");

                    b.Navigation("users");

                    b.Navigation("weathers");
                });

            modelBuilder.Entity("BusDelivery.Domain.Entities.Package", b =>
                {
                    b.Navigation("orders");

                    b.Navigation("userPackages");
                });

            modelBuilder.Entity("BusDelivery.Domain.Entities.Role", b =>
                {
                    b.Navigation("users");
                });

            modelBuilder.Entity("BusDelivery.Domain.Entities.Route", b =>
                {
                    b.Navigation("busRoutes");

                    b.Navigation("coordinates");

                    b.Navigation("stationRoutes");
                });

            modelBuilder.Entity("BusDelivery.Domain.Entities.Station", b =>
                {
                    b.Navigation("packages");

                    b.Navigation("stationRoutes");
                });

            modelBuilder.Entity("BusDelivery.Domain.Entities.User", b =>
                {
                    b.Navigation("refreshTokens");

                    b.Navigation("reports");

                    b.Navigation("userPackages");
                });
#pragma warning restore 612, 618
        }
    }
}
